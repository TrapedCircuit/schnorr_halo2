
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0x80, 11560913547261484817913632420980364601862120508702066863920972110470780853033)

        {
            let x := calldataload(0x0)
            mstore(0xa0, x)
            let y := calldataload(0x20)
            mstore(0xc0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x40)
            mstore(0xe0, x)
            let y := calldataload(0x60)
            mstore(0x100, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x80)
            mstore(0x120, x)
            let y := calldataload(0xa0)
            mstore(0x140, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xc0)
            mstore(0x160, x)
            let y := calldataload(0xe0)
            mstore(0x180, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x1a0, keccak256(0x80, 288))
{
            let hash := mload(0x1a0)
            mstore(0x1c0, mod(hash, f_q))
            mstore(0x1e0, hash)
        }

        {
            let x := calldataload(0x100)
            mstore(0x200, x)
            let y := calldataload(0x120)
            mstore(0x220, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x140)
            mstore(0x240, x)
            let y := calldataload(0x160)
            mstore(0x260, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x280, keccak256(0x1e0, 160))
{
            let hash := mload(0x280)
            mstore(0x2a0, mod(hash, f_q))
            mstore(0x2c0, hash)
        }
mstore8(736, 1)
mstore(0x2e0, keccak256(0x2c0, 33))
{
            let hash := mload(0x2e0)
            mstore(0x300, mod(hash, f_q))
            mstore(0x320, hash)
        }

        {
            let x := calldataload(0x180)
            mstore(0x340, x)
            let y := calldataload(0x1a0)
            mstore(0x360, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1c0)
            mstore(0x380, x)
            let y := calldataload(0x1e0)
            mstore(0x3a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x200)
            mstore(0x3c0, x)
            let y := calldataload(0x220)
            mstore(0x3e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x240)
            mstore(0x400, x)
            let y := calldataload(0x260)
            mstore(0x420, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x280)
            mstore(0x440, x)
            let y := calldataload(0x2a0)
            mstore(0x460, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x480, keccak256(0x320, 352))
{
            let hash := mload(0x480)
            mstore(0x4a0, mod(hash, f_q))
            mstore(0x4c0, hash)
        }

        {
            let x := calldataload(0x2c0)
            mstore(0x4e0, x)
            let y := calldataload(0x2e0)
            mstore(0x500, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x300)
            mstore(0x520, x)
            let y := calldataload(0x320)
            mstore(0x540, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x340)
            mstore(0x560, x)
            let y := calldataload(0x360)
            mstore(0x580, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x5a0, keccak256(0x4c0, 224))
{
            let hash := mload(0x5a0)
            mstore(0x5c0, mod(hash, f_q))
            mstore(0x5e0, hash)
        }
mstore(0x600, mod(calldataload(0x380), f_q))
mstore(0x620, mod(calldataload(0x3a0), f_q))
mstore(0x640, mod(calldataload(0x3c0), f_q))
mstore(0x660, mod(calldataload(0x3e0), f_q))
mstore(0x680, mod(calldataload(0x400), f_q))
mstore(0x6a0, mod(calldataload(0x420), f_q))
mstore(0x6c0, mod(calldataload(0x440), f_q))
mstore(0x6e0, mod(calldataload(0x460), f_q))
mstore(0x700, mod(calldataload(0x480), f_q))
mstore(0x720, mod(calldataload(0x4a0), f_q))
mstore(0x740, mod(calldataload(0x4c0), f_q))
mstore(0x760, mod(calldataload(0x4e0), f_q))
mstore(0x780, mod(calldataload(0x500), f_q))
mstore(0x7a0, mod(calldataload(0x520), f_q))
mstore(0x7c0, mod(calldataload(0x540), f_q))
mstore(0x7e0, mod(calldataload(0x560), f_q))
mstore(0x800, mod(calldataload(0x580), f_q))
mstore(0x820, mod(calldataload(0x5a0), f_q))
mstore(0x840, mod(calldataload(0x5c0), f_q))
mstore(0x860, mod(calldataload(0x5e0), f_q))
mstore(0x880, mod(calldataload(0x600), f_q))
mstore(0x8a0, mod(calldataload(0x620), f_q))
mstore(0x8c0, mod(calldataload(0x640), f_q))
mstore(0x8e0, mod(calldataload(0x660), f_q))
mstore(0x900, mod(calldataload(0x680), f_q))
mstore(0x920, mod(calldataload(0x6a0), f_q))
mstore(0x940, mod(calldataload(0x6c0), f_q))
mstore(0x960, mod(calldataload(0x6e0), f_q))
mstore(0x980, mod(calldataload(0x700), f_q))
mstore(0x9a0, mod(calldataload(0x720), f_q))
mstore(0x9c0, mod(calldataload(0x740), f_q))
mstore(0x9e0, mod(calldataload(0x760), f_q))
mstore(0xa00, mod(calldataload(0x780), f_q))
mstore(0xa20, mod(calldataload(0x7a0), f_q))
mstore(0xa40, mod(calldataload(0x7c0), f_q))
mstore(0xa60, mod(calldataload(0x7e0), f_q))
mstore(0xa80, mod(calldataload(0x800), f_q))
mstore(0xaa0, keccak256(0x5e0, 1216))
{
            let hash := mload(0xaa0)
            mstore(0xac0, mod(hash, f_q))
            mstore(0xae0, hash)
        }
mstore8(2816, 1)
mstore(0xb00, keccak256(0xae0, 33))
{
            let hash := mload(0xb00)
            mstore(0xb20, mod(hash, f_q))
            mstore(0xb40, hash)
        }

        {
            let x := calldataload(0x820)
            mstore(0xb60, x)
            let y := calldataload(0x840)
            mstore(0xb80, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xba0, keccak256(0xb40, 96))
{
            let hash := mload(0xba0)
            mstore(0xbc0, mod(hash, f_q))
            mstore(0xbe0, hash)
        }

        {
            let x := calldataload(0x860)
            mstore(0xc00, x)
            let y := calldataload(0x880)
            mstore(0xc20, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xc40, mulmod(mload(0x5c0), mload(0x5c0), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, addmod(mload(0xd60), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xda0, mulmod(mload(0xd80), 21866867634659744680037180739646672280844703888306253060159436409049855557633, f_q))
mstore(0xdc0, mulmod(mload(0xda0), 17441530497276410801425079580926443307744058978973998229533345407034924067026, f_q))
mstore(0xde0, addmod(mload(0x5c0), 4446712374562864420821326164330831780804305421442036114164858779540884428591, f_q))
mstore(0xe00, mulmod(mload(0xda0), 9936069627611189518829255670237324269287146421271524553312532036927871056678, f_q))
mstore(0xe20, addmod(mload(0x5c0), 11952173244228085703417150075019950819261217979144509790385672149647937438939, f_q))
mstore(0xe40, mulmod(mload(0xda0), 1680739780407307830605919050682431078078760076686599579086116998224280619988, f_q))
mstore(0xe60, addmod(mload(0x5c0), 20207503091431967391640486694574844010469604323729434764612087188351527875629, f_q))
mstore(0xe80, mulmod(mload(0xda0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0xea0, addmod(mload(0x5c0), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0xec0, mulmod(mload(0xda0), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))
mstore(0xee0, addmod(mload(0x5c0), 6189213060905190907425759670690446807930574449253110894497805650994602323199, f_q))
mstore(0xf00, mulmod(mload(0xda0), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))
mstore(0xf20, addmod(mload(0x5c0), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))
mstore(0xf40, mulmod(mload(0xda0), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))
mstore(0xf60, addmod(mload(0x5c0), 16962650269846620577512114154870527443683566727810288380890833831998684679710, f_q))
mstore(0xf80, mulmod(mload(0xda0), 1, f_q))
mstore(0xfa0, addmod(mload(0x5c0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
{
            let prod := mload(0xde0)

                prod := mulmod(mload(0xe20), prod, f_q)
                mstore(0xfc0, prod)
            
                prod := mulmod(mload(0xe60), prod, f_q)
                mstore(0xfe0, prod)
            
                prod := mulmod(mload(0xea0), prod, f_q)
                mstore(0x1000, prod)
            
                prod := mulmod(mload(0xee0), prod, f_q)
                mstore(0x1020, prod)
            
                prod := mulmod(mload(0xf20), prod, f_q)
                mstore(0x1040, prod)
            
                prod := mulmod(mload(0xf60), prod, f_q)
                mstore(0x1060, prod)
            
                prod := mulmod(mload(0xfa0), prod, f_q)
                mstore(0x1080, prod)
            
                prod := mulmod(mload(0xd80), prod, f_q)
                mstore(0x10a0, prod)
            
        }
mstore(0x10e0, 32)
mstore(0x1100, 32)
mstore(0x1120, 32)
mstore(0x1140, mload(0x10a0))
mstore(0x1160, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1180, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x10e0, 0xc0, 0x10c0, 0x20), 1), success)
{
            
            let inv := mload(0x10c0)
            let v
        
                    v := mload(0xd80)
                    mstore(3456, mulmod(mload(0x1080), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfa0)
                    mstore(4000, mulmod(mload(0x1060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf60)
                    mstore(3936, mulmod(mload(0x1040), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf20)
                    mstore(3872, mulmod(mload(0x1020), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xee0)
                    mstore(3808, mulmod(mload(0x1000), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xea0)
                    mstore(3744, mulmod(mload(0xfe0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xe60)
                    mstore(3680, mulmod(mload(0xfc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xe20)
                    mstore(3616, mulmod(mload(0xde0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xde0, inv)

        }
mstore(0x11a0, mulmod(mload(0xdc0), mload(0xde0), f_q))
mstore(0x11c0, mulmod(mload(0xe00), mload(0xe20), f_q))
mstore(0x11e0, mulmod(mload(0xe40), mload(0xe60), f_q))
mstore(0x1200, mulmod(mload(0xe80), mload(0xea0), f_q))
mstore(0x1220, mulmod(mload(0xec0), mload(0xee0), f_q))
mstore(0x1240, mulmod(mload(0xf00), mload(0xf20), f_q))
mstore(0x1260, mulmod(mload(0xf40), mload(0xf60), f_q))
mstore(0x1280, mulmod(mload(0xf80), mload(0xfa0), f_q))
mstore(0x12a0, mulmod(mload(0x640), mload(0x620), f_q))
mstore(0x12c0, addmod(mload(0x600), mload(0x12a0), f_q))
mstore(0x12e0, addmod(mload(0x12c0), sub(f_q, mload(0x660)), f_q))
mstore(0x1300, mulmod(mload(0x12e0), mload(0x7e0), f_q))
mstore(0x1320, mulmod(mload(0x4a0), mload(0x1300), f_q))
mstore(0x1340, mulmod(mload(0x6c0), mload(0x6a0), f_q))
mstore(0x1360, addmod(mload(0x680), mload(0x1340), f_q))
mstore(0x1380, addmod(mload(0x1360), sub(f_q, mload(0x6e0)), f_q))
mstore(0x13a0, mulmod(mload(0x1380), mload(0x800), f_q))
mstore(0x13c0, addmod(mload(0x1320), mload(0x13a0), f_q))
mstore(0x13e0, mulmod(mload(0x4a0), mload(0x13c0), f_q))
mstore(0x1400, mulmod(mload(0x740), mload(0x720), f_q))
mstore(0x1420, addmod(mload(0x700), mload(0x1400), f_q))
mstore(0x1440, addmod(mload(0x1420), sub(f_q, mload(0x760)), f_q))
mstore(0x1460, mulmod(mload(0x1440), mload(0x820), f_q))
mstore(0x1480, addmod(mload(0x13e0), mload(0x1460), f_q))
mstore(0x14a0, mulmod(mload(0x4a0), mload(0x1480), f_q))
mstore(0x14c0, addmod(1, sub(f_q, mload(0x900)), f_q))
mstore(0x14e0, mulmod(mload(0x14c0), mload(0x1280), f_q))
mstore(0x1500, addmod(mload(0x14a0), mload(0x14e0), f_q))
mstore(0x1520, mulmod(mload(0x4a0), mload(0x1500), f_q))
mstore(0x1540, mulmod(mload(0x9c0), mload(0x9c0), f_q))
mstore(0x1560, addmod(mload(0x1540), sub(f_q, mload(0x9c0)), f_q))
mstore(0x1580, mulmod(mload(0x1560), mload(0x11a0), f_q))
mstore(0x15a0, addmod(mload(0x1520), mload(0x1580), f_q))
mstore(0x15c0, mulmod(mload(0x4a0), mload(0x15a0), f_q))
mstore(0x15e0, addmod(mload(0x960), sub(f_q, mload(0x940)), f_q))
mstore(0x1600, mulmod(mload(0x15e0), mload(0x1280), f_q))
mstore(0x1620, addmod(mload(0x15c0), mload(0x1600), f_q))
mstore(0x1640, mulmod(mload(0x4a0), mload(0x1620), f_q))
mstore(0x1660, addmod(mload(0x9c0), sub(f_q, mload(0x9a0)), f_q))
mstore(0x1680, mulmod(mload(0x1660), mload(0x1280), f_q))
mstore(0x16a0, addmod(mload(0x1640), mload(0x1680), f_q))
mstore(0x16c0, mulmod(mload(0x4a0), mload(0x16a0), f_q))
mstore(0x16e0, addmod(1, sub(f_q, mload(0x11a0)), f_q))
mstore(0x1700, addmod(mload(0x11c0), mload(0x11e0), f_q))
mstore(0x1720, addmod(mload(0x1700), mload(0x1200), f_q))
mstore(0x1740, addmod(mload(0x1720), mload(0x1220), f_q))
mstore(0x1760, addmod(mload(0x1740), mload(0x1240), f_q))
mstore(0x1780, addmod(mload(0x1760), mload(0x1260), f_q))
mstore(0x17a0, addmod(mload(0x16e0), sub(f_q, mload(0x1780)), f_q))
mstore(0x17c0, mulmod(mload(0x860), mload(0x2a0), f_q))
mstore(0x17e0, addmod(mload(0x7a0), mload(0x17c0), f_q))
mstore(0x1800, addmod(mload(0x17e0), mload(0x300), f_q))
mstore(0x1820, mulmod(mload(0x880), mload(0x2a0), f_q))
mstore(0x1840, addmod(mload(0x600), mload(0x1820), f_q))
mstore(0x1860, addmod(mload(0x1840), mload(0x300), f_q))
mstore(0x1880, mulmod(mload(0x1860), mload(0x1800), f_q))
mstore(0x18a0, mulmod(mload(0x1880), mload(0x920), f_q))
mstore(0x18c0, mulmod(1, mload(0x2a0), f_q))
mstore(0x18e0, mulmod(mload(0x5c0), mload(0x18c0), f_q))
mstore(0x1900, addmod(mload(0x7a0), mload(0x18e0), f_q))
mstore(0x1920, addmod(mload(0x1900), mload(0x300), f_q))
mstore(0x1940, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x2a0), f_q))
mstore(0x1960, mulmod(mload(0x5c0), mload(0x1940), f_q))
mstore(0x1980, addmod(mload(0x600), mload(0x1960), f_q))
mstore(0x19a0, addmod(mload(0x1980), mload(0x300), f_q))
mstore(0x19c0, mulmod(mload(0x19a0), mload(0x1920), f_q))
mstore(0x19e0, mulmod(mload(0x19c0), mload(0x900), f_q))
mstore(0x1a00, addmod(mload(0x18a0), sub(f_q, mload(0x19e0)), f_q))
mstore(0x1a20, mulmod(mload(0x1a00), mload(0x17a0), f_q))
mstore(0x1a40, addmod(mload(0x16c0), mload(0x1a20), f_q))
mstore(0x1a60, mulmod(mload(0x4a0), mload(0x1a40), f_q))
mstore(0x1a80, mulmod(mload(0x8a0), mload(0x2a0), f_q))
mstore(0x1aa0, addmod(mload(0x680), mload(0x1a80), f_q))
mstore(0x1ac0, addmod(mload(0x1aa0), mload(0x300), f_q))
mstore(0x1ae0, mulmod(mload(0x8c0), mload(0x2a0), f_q))
mstore(0x1b00, addmod(mload(0x700), mload(0x1ae0), f_q))
mstore(0x1b20, addmod(mload(0x1b00), mload(0x300), f_q))
mstore(0x1b40, mulmod(mload(0x1b20), mload(0x1ac0), f_q))
mstore(0x1b60, mulmod(mload(0x1b40), mload(0x980), f_q))
mstore(0x1b80, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x2a0), f_q))
mstore(0x1ba0, mulmod(mload(0x5c0), mload(0x1b80), f_q))
mstore(0x1bc0, addmod(mload(0x680), mload(0x1ba0), f_q))
mstore(0x1be0, addmod(mload(0x1bc0), mload(0x300), f_q))
mstore(0x1c00, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x2a0), f_q))
mstore(0x1c20, mulmod(mload(0x5c0), mload(0x1c00), f_q))
mstore(0x1c40, addmod(mload(0x700), mload(0x1c20), f_q))
mstore(0x1c60, addmod(mload(0x1c40), mload(0x300), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x1be0), f_q))
mstore(0x1ca0, mulmod(mload(0x1c80), mload(0x960), f_q))
mstore(0x1cc0, addmod(mload(0x1b60), sub(f_q, mload(0x1ca0)), f_q))
mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x17a0), f_q))
mstore(0x1d00, addmod(mload(0x1a60), mload(0x1ce0), f_q))
mstore(0x1d20, mulmod(mload(0x4a0), mload(0x1d00), f_q))
mstore(0x1d40, mulmod(mload(0x8e0), mload(0x2a0), f_q))
mstore(0x1d60, addmod(mload(0x780), mload(0x1d40), f_q))
mstore(0x1d80, addmod(mload(0x1d60), mload(0x300), f_q))
mstore(0x1da0, mulmod(mload(0x1d80), mload(0x9e0), f_q))
mstore(0x1dc0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x2a0), f_q))
mstore(0x1de0, mulmod(mload(0x5c0), mload(0x1dc0), f_q))
mstore(0x1e00, addmod(mload(0x780), mload(0x1de0), f_q))
mstore(0x1e20, addmod(mload(0x1e00), mload(0x300), f_q))
mstore(0x1e40, mulmod(mload(0x1e20), mload(0x9c0), f_q))
mstore(0x1e60, addmod(mload(0x1da0), sub(f_q, mload(0x1e40)), f_q))
mstore(0x1e80, mulmod(mload(0x1e60), mload(0x17a0), f_q))
mstore(0x1ea0, addmod(mload(0x1d20), mload(0x1e80), f_q))
mstore(0x1ec0, mulmod(mload(0x4a0), mload(0x1ea0), f_q))
mstore(0x1ee0, addmod(1, sub(f_q, mload(0xa00)), f_q))
mstore(0x1f00, mulmod(mload(0x1ee0), mload(0x1280), f_q))
mstore(0x1f20, addmod(mload(0x1ec0), mload(0x1f00), f_q))
mstore(0x1f40, mulmod(mload(0x4a0), mload(0x1f20), f_q))
mstore(0x1f60, mulmod(mload(0xa00), mload(0xa00), f_q))
mstore(0x1f80, addmod(mload(0x1f60), sub(f_q, mload(0xa00)), f_q))
mstore(0x1fa0, mulmod(mload(0x1f80), mload(0x11a0), f_q))
mstore(0x1fc0, addmod(mload(0x1f40), mload(0x1fa0), f_q))
mstore(0x1fe0, mulmod(mload(0x4a0), mload(0x1fc0), f_q))
mstore(0x2000, addmod(mload(0xa40), mload(0x2a0), f_q))
mstore(0x2020, mulmod(mload(0x2000), mload(0xa20), f_q))
mstore(0x2040, addmod(mload(0xa80), mload(0x300), f_q))
mstore(0x2060, mulmod(mload(0x2040), mload(0x2020), f_q))
mstore(0x2080, addmod(mload(0x780), mload(0x2a0), f_q))
mstore(0x20a0, mulmod(mload(0x2080), mload(0xa00), f_q))
mstore(0x20c0, addmod(mload(0x7c0), mload(0x300), f_q))
mstore(0x20e0, mulmod(mload(0x20c0), mload(0x20a0), f_q))
mstore(0x2100, addmod(mload(0x2060), sub(f_q, mload(0x20e0)), f_q))
mstore(0x2120, mulmod(mload(0x2100), mload(0x17a0), f_q))
mstore(0x2140, addmod(mload(0x1fe0), mload(0x2120), f_q))
mstore(0x2160, mulmod(mload(0x4a0), mload(0x2140), f_q))
mstore(0x2180, addmod(mload(0xa40), sub(f_q, mload(0xa80)), f_q))
mstore(0x21a0, mulmod(mload(0x2180), mload(0x1280), f_q))
mstore(0x21c0, addmod(mload(0x2160), mload(0x21a0), f_q))
mstore(0x21e0, mulmod(mload(0x4a0), mload(0x21c0), f_q))
mstore(0x2200, mulmod(mload(0x2180), mload(0x17a0), f_q))
mstore(0x2220, addmod(mload(0xa40), sub(f_q, mload(0xa60)), f_q))
mstore(0x2240, mulmod(mload(0x2220), mload(0x2200), f_q))
mstore(0x2260, addmod(mload(0x21e0), mload(0x2240), f_q))
mstore(0x2280, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0x22a0, mulmod(mload(0x2280), mload(0xd60), f_q))
mstore(0x22c0, mulmod(1, mload(0xd60), f_q))
mstore(0x22e0, mulmod(1, mload(0x2280), f_q))
mstore(0x2300, mulmod(mload(0x2260), mload(0xd80), f_q))
mstore(0x2320, mulmod(mload(0xc40), mload(0x5c0), f_q))
mstore(0x2340, mulmod(mload(0x2320), mload(0x5c0), f_q))
mstore(0x2360, mulmod(mload(0x5c0), 17441530497276410801425079580926443307744058978973998229533345407034924067026, f_q))
mstore(0x2380, addmod(mload(0xbc0), sub(f_q, mload(0x2360)), f_q))
mstore(0x23a0, mulmod(mload(0x5c0), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))
mstore(0x23c0, addmod(mload(0xbc0), sub(f_q, mload(0x23a0)), f_q))
mstore(0x23e0, mulmod(mload(0x5c0), 1, f_q))
mstore(0x2400, addmod(mload(0xbc0), sub(f_q, mload(0x23e0)), f_q))
mstore(0x2420, mulmod(mload(0x5c0), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))
mstore(0x2440, addmod(mload(0xbc0), sub(f_q, mload(0x2420)), f_q))
mstore(0x2460, mulmod(mload(0x5c0), 6252951856119339508807713076978770803512896272623217303779254502899773638908, f_q))
mstore(0x2480, addmod(mload(0xbc0), sub(f_q, mload(0x2460)), f_q))
mstore(0x24a0, mulmod(mload(0x5c0), 15554008185779528788857340196607833777388478343360168149406749724843247080062, f_q))
mstore(0x24c0, addmod(mload(0xbc0), sub(f_q, mload(0x24a0)), f_q))
mstore(0x24e0, mulmod(11455714684580531513382013197108593752563007529119374331151835319008087430002, mload(0x2320), f_q))
mstore(0x2500, mulmod(mload(0x24e0), 1, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x24e0), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2500)), f_q), result, f_q)
mstore(9504, result)
        }
mstore(0x2540, mulmod(1965851456758415233442111858963124169772290568326214490078433275299408676096, mload(0x2320), f_q))
mstore(0x2560, mulmod(mload(0x2540), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2540), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2560)), f_q), result, f_q)
mstore(9600, result)
        }
mstore(0x25a0, mulmod(7436676613956226630784277006538728711924306727401366563618519954049910003583, mload(0x2320), f_q))
mstore(0x25c0, mulmod(mload(0x25a0), 6252951856119339508807713076978770803512896272623217303779254502899773638908, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x25a0), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x25c0)), f_q), result, f_q)
mstore(9696, result)
        }
mstore(0x2600, mulmod(9785996833891847962097488702383294137656011130103115461144748082486954664539, mload(0x2320), f_q))
mstore(0x2620, mulmod(mload(0x2600), 15554008185779528788857340196607833777388478343360168149406749724843247080062, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2600), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2620)), f_q), result, f_q)
mstore(9792, result)
        }
mstore(0x2660, mulmod(1, mload(0x2400), f_q))
mstore(0x2680, mulmod(mload(0x2660), mload(0x2440), f_q))
mstore(0x26a0, mulmod(mload(0x2680), mload(0x2480), f_q))
mstore(0x26c0, mulmod(mload(0x26a0), mload(0x24c0), f_q))
{
            let result := mulmod(mload(0xbc0), 1, f_q)
result := addmod(mulmod(mload(0x5c0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(9952, result)
        }
mstore(0x2700, mulmod(16890464786212063414782155873689110629215001563560316176784054804156270663386, mload(0xc40), f_q))
mstore(0x2720, mulmod(mload(0x2700), 1, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2700), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2720)), f_q), result, f_q)
mstore(10048, result)
        }
mstore(0x2760, mulmod(16266095509822570266535111026788844421093358551172446489306731860694341827372, mload(0xc40), f_q))
mstore(0x2780, mulmod(mload(0x2760), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2760), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2780)), f_q), result, f_q)
mstore(10144, result)
        }
mstore(0x27c0, mulmod(20925281322504001078799293268336423845392871902204890205196767873891520476696, mload(0xc40), f_q))
mstore(0x27e0, mulmod(mload(0x27c0), 17441530497276410801425079580926443307744058978973998229533345407034924067026, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x27c0), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x27e0)), f_q), result, f_q)
mstore(10240, result)
        }
mstore(0x2820, mulmod(mload(0x2680), mload(0x2380), f_q))
mstore(0x2840, mulmod(2507682784038009475131574039120954579123549720846755509306663987687515178117, mload(0x5c0), f_q))
mstore(0x2860, mulmod(mload(0x2840), 1, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2840), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2860)), f_q), result, f_q)
mstore(10368, result)
        }
mstore(0x28a0, mulmod(19380560087801265747114831706136320509424814679569278834391540198888293317500, mload(0x5c0), f_q))
mstore(0x28c0, mulmod(mload(0x28a0), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x28a0), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x28c0)), f_q), result, f_q)
mstore(10464, result)
        }
mstore(0x2900, mulmod(16962650269846620577512114154870527443683566727810288380890833831998684679711, mload(0x5c0), f_q))
mstore(0x2920, mulmod(mload(0x2900), 1, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2900), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2920)), f_q), result, f_q)
mstore(10560, result)
        }
mstore(0x2960, mulmod(4925592601992654644734291590386747644864797672605745962807370354577123815906, mload(0x5c0), f_q))
mstore(0x2980, mulmod(mload(0x2960), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x2960), f_q)
result := addmod(mulmod(mload(0x5c0), sub(f_q, mload(0x2980)), f_q), result, f_q)
mstore(10656, result)
        }
mstore(0x29c0, mulmod(mload(0x2660), mload(0x23c0), f_q))
{
            let prod := mload(0x2520)

                prod := mulmod(mload(0x2580), prod, f_q)
                mstore(0x29e0, prod)
            
                prod := mulmod(mload(0x25e0), prod, f_q)
                mstore(0x2a00, prod)
            
                prod := mulmod(mload(0x2640), prod, f_q)
                mstore(0x2a20, prod)
            
                prod := mulmod(mload(0x26e0), prod, f_q)
                mstore(0x2a40, prod)
            
                prod := mulmod(mload(0x2660), prod, f_q)
                mstore(0x2a60, prod)
            
                prod := mulmod(mload(0x2740), prod, f_q)
                mstore(0x2a80, prod)
            
                prod := mulmod(mload(0x27a0), prod, f_q)
                mstore(0x2aa0, prod)
            
                prod := mulmod(mload(0x2800), prod, f_q)
                mstore(0x2ac0, prod)
            
                prod := mulmod(mload(0x2820), prod, f_q)
                mstore(0x2ae0, prod)
            
                prod := mulmod(mload(0x2880), prod, f_q)
                mstore(0x2b00, prod)
            
                prod := mulmod(mload(0x28e0), prod, f_q)
                mstore(0x2b20, prod)
            
                prod := mulmod(mload(0x2680), prod, f_q)
                mstore(0x2b40, prod)
            
                prod := mulmod(mload(0x2940), prod, f_q)
                mstore(0x2b60, prod)
            
                prod := mulmod(mload(0x29a0), prod, f_q)
                mstore(0x2b80, prod)
            
                prod := mulmod(mload(0x29c0), prod, f_q)
                mstore(0x2ba0, prod)
            
        }
mstore(0x2be0, 32)
mstore(0x2c00, 32)
mstore(0x2c20, 32)
mstore(0x2c40, mload(0x2ba0))
mstore(0x2c60, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2c80, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2be0, 0xc0, 0x2bc0, 0x20), 1), success)
{
            
            let inv := mload(0x2bc0)
            let v
        
                    v := mload(0x29c0)
                    mstore(10688, mulmod(mload(0x2b80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x29a0)
                    mstore(10656, mulmod(mload(0x2b60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2940)
                    mstore(10560, mulmod(mload(0x2b40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2680)
                    mstore(9856, mulmod(mload(0x2b20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x28e0)
                    mstore(10464, mulmod(mload(0x2b00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2880)
                    mstore(10368, mulmod(mload(0x2ae0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2820)
                    mstore(10272, mulmod(mload(0x2ac0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2800)
                    mstore(10240, mulmod(mload(0x2aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x27a0)
                    mstore(10144, mulmod(mload(0x2a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2740)
                    mstore(10048, mulmod(mload(0x2a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2660)
                    mstore(9824, mulmod(mload(0x2a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x26e0)
                    mstore(9952, mulmod(mload(0x2a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2640)
                    mstore(9792, mulmod(mload(0x2a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x25e0)
                    mstore(9696, mulmod(mload(0x29e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2580)
                    mstore(9600, mulmod(mload(0x2520), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2520, inv)

        }
{
            let result := mload(0x2520)
result := addmod(mload(0x2580), result, f_q)
result := addmod(mload(0x25e0), result, f_q)
result := addmod(mload(0x2640), result, f_q)
mstore(11424, result)
        }
mstore(0x2cc0, mulmod(mload(0x26c0), mload(0x2660), f_q))
{
            let result := mload(0x26e0)
mstore(11488, result)
        }
mstore(0x2d00, mulmod(mload(0x26c0), mload(0x2820), f_q))
{
            let result := mload(0x2740)
result := addmod(mload(0x27a0), result, f_q)
result := addmod(mload(0x2800), result, f_q)
mstore(11552, result)
        }
mstore(0x2d40, mulmod(mload(0x26c0), mload(0x2680), f_q))
{
            let result := mload(0x2880)
result := addmod(mload(0x28e0), result, f_q)
mstore(11616, result)
        }
mstore(0x2d80, mulmod(mload(0x26c0), mload(0x29c0), f_q))
{
            let result := mload(0x2940)
result := addmod(mload(0x29a0), result, f_q)
mstore(11680, result)
        }
{
            let prod := mload(0x2ca0)

                prod := mulmod(mload(0x2ce0), prod, f_q)
                mstore(0x2dc0, prod)
            
                prod := mulmod(mload(0x2d20), prod, f_q)
                mstore(0x2de0, prod)
            
                prod := mulmod(mload(0x2d60), prod, f_q)
                mstore(0x2e00, prod)
            
                prod := mulmod(mload(0x2da0), prod, f_q)
                mstore(0x2e20, prod)
            
        }
mstore(0x2e60, 32)
mstore(0x2e80, 32)
mstore(0x2ea0, 32)
mstore(0x2ec0, mload(0x2e20))
mstore(0x2ee0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2f00, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2e60, 0xc0, 0x2e40, 0x20), 1), success)
{
            
            let inv := mload(0x2e40)
            let v
        
                    v := mload(0x2da0)
                    mstore(11680, mulmod(mload(0x2e00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d60)
                    mstore(11616, mulmod(mload(0x2de0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d20)
                    mstore(11552, mulmod(mload(0x2dc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2ce0)
                    mstore(11488, mulmod(mload(0x2ca0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2ca0, inv)

        }
mstore(0x2f20, mulmod(mload(0x2cc0), mload(0x2ce0), f_q))
mstore(0x2f40, mulmod(mload(0x2d00), mload(0x2d20), f_q))
mstore(0x2f60, mulmod(mload(0x2d40), mload(0x2d60), f_q))
mstore(0x2f80, mulmod(mload(0x2d80), mload(0x2da0), f_q))
mstore(0x2fa0, mulmod(mload(0xac0), mload(0xac0), f_q))
mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0xac0), f_q))
mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0xac0), f_q))
mstore(0x3000, mulmod(mload(0x2fe0), mload(0xac0), f_q))
mstore(0x3020, mulmod(mload(0x3000), mload(0xac0), f_q))
mstore(0x3040, mulmod(mload(0x3020), mload(0xac0), f_q))
mstore(0x3060, mulmod(mload(0x3040), mload(0xac0), f_q))
mstore(0x3080, mulmod(mload(0x3060), mload(0xac0), f_q))
mstore(0x30a0, mulmod(mload(0x3080), mload(0xac0), f_q))
mstore(0x30c0, mulmod(mload(0x30a0), mload(0xac0), f_q))
mstore(0x30e0, mulmod(mload(0x30c0), mload(0xac0), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0xac0), f_q))
mstore(0x3120, mulmod(mload(0x3100), mload(0xac0), f_q))
mstore(0x3140, mulmod(mload(0xb20), mload(0xb20), f_q))
mstore(0x3160, mulmod(mload(0x3140), mload(0xb20), f_q))
mstore(0x3180, mulmod(mload(0x3160), mload(0xb20), f_q))
mstore(0x31a0, mulmod(mload(0x3180), mload(0xb20), f_q))
{
            let result := mulmod(mload(0x600), mload(0x2520), f_q)
result := addmod(mulmod(mload(0x620), mload(0x2580), f_q), result, f_q)
result := addmod(mulmod(mload(0x640), mload(0x25e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x660), mload(0x2640), f_q), result, f_q)
mstore(12736, result)
        }
mstore(0x31e0, mulmod(mload(0x31c0), mload(0x2ca0), f_q))
mstore(0x3200, mulmod(sub(f_q, mload(0x31e0)), 1, f_q))
{
            let result := mulmod(mload(0x680), mload(0x2520), f_q)
result := addmod(mulmod(mload(0x6a0), mload(0x2580), f_q), result, f_q)
result := addmod(mulmod(mload(0x6c0), mload(0x25e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x6e0), mload(0x2640), f_q), result, f_q)
mstore(12832, result)
        }
mstore(0x3240, mulmod(mload(0x3220), mload(0x2ca0), f_q))
mstore(0x3260, mulmod(sub(f_q, mload(0x3240)), mload(0xac0), f_q))
mstore(0x3280, mulmod(1, mload(0xac0), f_q))
mstore(0x32a0, addmod(mload(0x3200), mload(0x3260), f_q))
{
            let result := mulmod(mload(0x700), mload(0x2520), f_q)
result := addmod(mulmod(mload(0x720), mload(0x2580), f_q), result, f_q)
result := addmod(mulmod(mload(0x740), mload(0x25e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x760), mload(0x2640), f_q), result, f_q)
mstore(12992, result)
        }
mstore(0x32e0, mulmod(mload(0x32c0), mload(0x2ca0), f_q))
mstore(0x3300, mulmod(sub(f_q, mload(0x32e0)), mload(0x2fa0), f_q))
mstore(0x3320, mulmod(1, mload(0x2fa0), f_q))
mstore(0x3340, addmod(mload(0x32a0), mload(0x3300), f_q))
mstore(0x3360, mulmod(mload(0x3340), 1, f_q))
mstore(0x3380, mulmod(mload(0x3280), 1, f_q))
mstore(0x33a0, mulmod(mload(0x3320), 1, f_q))
mstore(0x33c0, mulmod(1, mload(0x2cc0), f_q))
{
            let result := mulmod(mload(0x780), mload(0x26e0), f_q)
mstore(13280, result)
        }
mstore(0x3400, mulmod(mload(0x33e0), mload(0x2f20), f_q))
mstore(0x3420, mulmod(sub(f_q, mload(0x3400)), 1, f_q))
mstore(0x3440, mulmod(mload(0x33c0), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x26e0), f_q)
mstore(13408, result)
        }
mstore(0x3480, mulmod(mload(0x3460), mload(0x2f20), f_q))
mstore(0x34a0, mulmod(sub(f_q, mload(0x3480)), mload(0xac0), f_q))
mstore(0x34c0, mulmod(mload(0x33c0), mload(0xac0), f_q))
mstore(0x34e0, addmod(mload(0x3420), mload(0x34a0), f_q))
{
            let result := mulmod(mload(0x7a0), mload(0x26e0), f_q)
mstore(13568, result)
        }
mstore(0x3520, mulmod(mload(0x3500), mload(0x2f20), f_q))
mstore(0x3540, mulmod(sub(f_q, mload(0x3520)), mload(0x2fa0), f_q))
mstore(0x3560, mulmod(mload(0x33c0), mload(0x2fa0), f_q))
mstore(0x3580, addmod(mload(0x34e0), mload(0x3540), f_q))
{
            let result := mulmod(mload(0x7c0), mload(0x26e0), f_q)
mstore(13728, result)
        }
mstore(0x35c0, mulmod(mload(0x35a0), mload(0x2f20), f_q))
mstore(0x35e0, mulmod(sub(f_q, mload(0x35c0)), mload(0x2fc0), f_q))
mstore(0x3600, mulmod(mload(0x33c0), mload(0x2fc0), f_q))
mstore(0x3620, addmod(mload(0x3580), mload(0x35e0), f_q))
{
            let result := mulmod(mload(0x7e0), mload(0x26e0), f_q)
mstore(13888, result)
        }
mstore(0x3660, mulmod(mload(0x3640), mload(0x2f20), f_q))
mstore(0x3680, mulmod(sub(f_q, mload(0x3660)), mload(0x2fe0), f_q))
mstore(0x36a0, mulmod(mload(0x33c0), mload(0x2fe0), f_q))
mstore(0x36c0, addmod(mload(0x3620), mload(0x3680), f_q))
{
            let result := mulmod(mload(0x800), mload(0x26e0), f_q)
mstore(14048, result)
        }
mstore(0x3700, mulmod(mload(0x36e0), mload(0x2f20), f_q))
mstore(0x3720, mulmod(sub(f_q, mload(0x3700)), mload(0x3000), f_q))
mstore(0x3740, mulmod(mload(0x33c0), mload(0x3000), f_q))
mstore(0x3760, addmod(mload(0x36c0), mload(0x3720), f_q))
{
            let result := mulmod(mload(0x820), mload(0x26e0), f_q)
mstore(14208, result)
        }
mstore(0x37a0, mulmod(mload(0x3780), mload(0x2f20), f_q))
mstore(0x37c0, mulmod(sub(f_q, mload(0x37a0)), mload(0x3020), f_q))
mstore(0x37e0, mulmod(mload(0x33c0), mload(0x3020), f_q))
mstore(0x3800, addmod(mload(0x3760), mload(0x37c0), f_q))
{
            let result := mulmod(mload(0x860), mload(0x26e0), f_q)
mstore(14368, result)
        }
mstore(0x3840, mulmod(mload(0x3820), mload(0x2f20), f_q))
mstore(0x3860, mulmod(sub(f_q, mload(0x3840)), mload(0x3040), f_q))
mstore(0x3880, mulmod(mload(0x33c0), mload(0x3040), f_q))
mstore(0x38a0, addmod(mload(0x3800), mload(0x3860), f_q))
{
            let result := mulmod(mload(0x880), mload(0x26e0), f_q)
mstore(14528, result)
        }
mstore(0x38e0, mulmod(mload(0x38c0), mload(0x2f20), f_q))
mstore(0x3900, mulmod(sub(f_q, mload(0x38e0)), mload(0x3060), f_q))
mstore(0x3920, mulmod(mload(0x33c0), mload(0x3060), f_q))
mstore(0x3940, addmod(mload(0x38a0), mload(0x3900), f_q))
{
            let result := mulmod(mload(0x8a0), mload(0x26e0), f_q)
mstore(14688, result)
        }
mstore(0x3980, mulmod(mload(0x3960), mload(0x2f20), f_q))
mstore(0x39a0, mulmod(sub(f_q, mload(0x3980)), mload(0x3080), f_q))
mstore(0x39c0, mulmod(mload(0x33c0), mload(0x3080), f_q))
mstore(0x39e0, addmod(mload(0x3940), mload(0x39a0), f_q))
{
            let result := mulmod(mload(0x8c0), mload(0x26e0), f_q)
mstore(14848, result)
        }
mstore(0x3a20, mulmod(mload(0x3a00), mload(0x2f20), f_q))
mstore(0x3a40, mulmod(sub(f_q, mload(0x3a20)), mload(0x30a0), f_q))
mstore(0x3a60, mulmod(mload(0x33c0), mload(0x30a0), f_q))
mstore(0x3a80, addmod(mload(0x39e0), mload(0x3a40), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x26e0), f_q)
mstore(15008, result)
        }
mstore(0x3ac0, mulmod(mload(0x3aa0), mload(0x2f20), f_q))
mstore(0x3ae0, mulmod(sub(f_q, mload(0x3ac0)), mload(0x30c0), f_q))
mstore(0x3b00, mulmod(mload(0x33c0), mload(0x30c0), f_q))
mstore(0x3b20, addmod(mload(0x3a80), mload(0x3ae0), f_q))
mstore(0x3b40, mulmod(mload(0x22c0), mload(0x2cc0), f_q))
mstore(0x3b60, mulmod(mload(0x22e0), mload(0x2cc0), f_q))
{
            let result := mulmod(mload(0x2300), mload(0x26e0), f_q)
mstore(15232, result)
        }
mstore(0x3ba0, mulmod(mload(0x3b80), mload(0x2f20), f_q))
mstore(0x3bc0, mulmod(sub(f_q, mload(0x3ba0)), mload(0x30e0), f_q))
mstore(0x3be0, mulmod(mload(0x33c0), mload(0x30e0), f_q))
mstore(0x3c00, mulmod(mload(0x3b40), mload(0x30e0), f_q))
mstore(0x3c20, mulmod(mload(0x3b60), mload(0x30e0), f_q))
mstore(0x3c40, addmod(mload(0x3b20), mload(0x3bc0), f_q))
{
            let result := mulmod(mload(0x840), mload(0x26e0), f_q)
mstore(15456, result)
        }
mstore(0x3c80, mulmod(mload(0x3c60), mload(0x2f20), f_q))
mstore(0x3ca0, mulmod(sub(f_q, mload(0x3c80)), mload(0x3100), f_q))
mstore(0x3cc0, mulmod(mload(0x33c0), mload(0x3100), f_q))
mstore(0x3ce0, addmod(mload(0x3c40), mload(0x3ca0), f_q))
mstore(0x3d00, mulmod(mload(0x3ce0), mload(0xb20), f_q))
mstore(0x3d20, mulmod(mload(0x3440), mload(0xb20), f_q))
mstore(0x3d40, mulmod(mload(0x34c0), mload(0xb20), f_q))
mstore(0x3d60, mulmod(mload(0x3560), mload(0xb20), f_q))
mstore(0x3d80, mulmod(mload(0x3600), mload(0xb20), f_q))
mstore(0x3da0, mulmod(mload(0x36a0), mload(0xb20), f_q))
mstore(0x3dc0, mulmod(mload(0x3740), mload(0xb20), f_q))
mstore(0x3de0, mulmod(mload(0x37e0), mload(0xb20), f_q))
mstore(0x3e00, mulmod(mload(0x3880), mload(0xb20), f_q))
mstore(0x3e20, mulmod(mload(0x3920), mload(0xb20), f_q))
mstore(0x3e40, mulmod(mload(0x39c0), mload(0xb20), f_q))
mstore(0x3e60, mulmod(mload(0x3a60), mload(0xb20), f_q))
mstore(0x3e80, mulmod(mload(0x3b00), mload(0xb20), f_q))
mstore(0x3ea0, mulmod(mload(0x3be0), mload(0xb20), f_q))
mstore(0x3ec0, mulmod(mload(0x3c00), mload(0xb20), f_q))
mstore(0x3ee0, mulmod(mload(0x3c20), mload(0xb20), f_q))
mstore(0x3f00, mulmod(mload(0x3cc0), mload(0xb20), f_q))
mstore(0x3f20, addmod(mload(0x3360), mload(0x3d00), f_q))
mstore(0x3f40, mulmod(1, mload(0x2d00), f_q))
{
            let result := mulmod(mload(0x900), mload(0x2740), f_q)
result := addmod(mulmod(mload(0x920), mload(0x27a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x940), mload(0x2800), f_q), result, f_q)
mstore(16224, result)
        }
mstore(0x3f80, mulmod(mload(0x3f60), mload(0x2f40), f_q))
mstore(0x3fa0, mulmod(sub(f_q, mload(0x3f80)), 1, f_q))
mstore(0x3fc0, mulmod(mload(0x3f40), 1, f_q))
{
            let result := mulmod(mload(0x960), mload(0x2740), f_q)
result := addmod(mulmod(mload(0x980), mload(0x27a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x9a0), mload(0x2800), f_q), result, f_q)
mstore(16352, result)
        }
mstore(0x4000, mulmod(mload(0x3fe0), mload(0x2f40), f_q))
mstore(0x4020, mulmod(sub(f_q, mload(0x4000)), mload(0xac0), f_q))
mstore(0x4040, mulmod(mload(0x3f40), mload(0xac0), f_q))
mstore(0x4060, addmod(mload(0x3fa0), mload(0x4020), f_q))
mstore(0x4080, mulmod(mload(0x4060), mload(0x3140), f_q))
mstore(0x40a0, mulmod(mload(0x3fc0), mload(0x3140), f_q))
mstore(0x40c0, mulmod(mload(0x4040), mload(0x3140), f_q))
mstore(0x40e0, addmod(mload(0x3f20), mload(0x4080), f_q))
mstore(0x4100, mulmod(1, mload(0x2d40), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x2880), f_q)
result := addmod(mulmod(mload(0x9e0), mload(0x28e0), f_q), result, f_q)
mstore(16672, result)
        }
mstore(0x4140, mulmod(mload(0x4120), mload(0x2f60), f_q))
mstore(0x4160, mulmod(sub(f_q, mload(0x4140)), 1, f_q))
mstore(0x4180, mulmod(mload(0x4100), 1, f_q))
{
            let result := mulmod(mload(0xa00), mload(0x2880), f_q)
result := addmod(mulmod(mload(0xa20), mload(0x28e0), f_q), result, f_q)
mstore(16800, result)
        }
mstore(0x41c0, mulmod(mload(0x41a0), mload(0x2f60), f_q))
mstore(0x41e0, mulmod(sub(f_q, mload(0x41c0)), mload(0xac0), f_q))
mstore(0x4200, mulmod(mload(0x4100), mload(0xac0), f_q))
mstore(0x4220, addmod(mload(0x4160), mload(0x41e0), f_q))
mstore(0x4240, mulmod(mload(0x4220), mload(0x3160), f_q))
mstore(0x4260, mulmod(mload(0x4180), mload(0x3160), f_q))
mstore(0x4280, mulmod(mload(0x4200), mload(0x3160), f_q))
mstore(0x42a0, addmod(mload(0x40e0), mload(0x4240), f_q))
mstore(0x42c0, mulmod(1, mload(0x2d80), f_q))
{
            let result := mulmod(mload(0xa40), mload(0x2940), f_q)
result := addmod(mulmod(mload(0xa60), mload(0x29a0), f_q), result, f_q)
mstore(17120, result)
        }
mstore(0x4300, mulmod(mload(0x42e0), mload(0x2f80), f_q))
mstore(0x4320, mulmod(sub(f_q, mload(0x4300)), 1, f_q))
mstore(0x4340, mulmod(mload(0x42c0), 1, f_q))
mstore(0x4360, mulmod(mload(0x4320), mload(0x3180), f_q))
mstore(0x4380, mulmod(mload(0x4340), mload(0x3180), f_q))
mstore(0x43a0, addmod(mload(0x42a0), mload(0x4360), f_q))
mstore(0x43c0, mulmod(1, mload(0x26c0), f_q))
mstore(0x43e0, mulmod(1, mload(0xbc0), f_q))
mstore(0x4400, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x4420, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x4440, mload(0x43a0))
success := and(eq(staticcall(gas(), 0x7, 0x4400, 0x60, 0x4400, 0x40), 1), success)
mstore(0x4460, mload(0x4400))
                    mstore(0x4480, mload(0x4420))
mstore(0x44a0, mload(0xa0))
                    mstore(0x44c0, mload(0xc0))
success := and(eq(staticcall(gas(), 0x6, 0x4460, 0x80, 0x4460, 0x40), 1), success)
mstore(0x44e0, mload(0xe0))
                    mstore(0x4500, mload(0x100))
mstore(0x4520, mload(0x3380))
success := and(eq(staticcall(gas(), 0x7, 0x44e0, 0x60, 0x44e0, 0x40), 1), success)
mstore(0x4540, mload(0x4460))
                    mstore(0x4560, mload(0x4480))
mstore(0x4580, mload(0x44e0))
                    mstore(0x45a0, mload(0x4500))
success := and(eq(staticcall(gas(), 0x6, 0x4540, 0x80, 0x4540, 0x40), 1), success)
mstore(0x45c0, mload(0x120))
                    mstore(0x45e0, mload(0x140))
mstore(0x4600, mload(0x33a0))
success := and(eq(staticcall(gas(), 0x7, 0x45c0, 0x60, 0x45c0, 0x40), 1), success)
mstore(0x4620, mload(0x4540))
                    mstore(0x4640, mload(0x4560))
mstore(0x4660, mload(0x45c0))
                    mstore(0x4680, mload(0x45e0))
success := and(eq(staticcall(gas(), 0x6, 0x4620, 0x80, 0x4620, 0x40), 1), success)
mstore(0x46a0, mload(0x160))
                    mstore(0x46c0, mload(0x180))
mstore(0x46e0, mload(0x3d20))
success := and(eq(staticcall(gas(), 0x7, 0x46a0, 0x60, 0x46a0, 0x40), 1), success)
mstore(0x4700, mload(0x4620))
                    mstore(0x4720, mload(0x4640))
mstore(0x4740, mload(0x46a0))
                    mstore(0x4760, mload(0x46c0))
success := and(eq(staticcall(gas(), 0x6, 0x4700, 0x80, 0x4700, 0x40), 1), success)
mstore(0x4780, mload(0x240))
                    mstore(0x47a0, mload(0x260))
mstore(0x47c0, mload(0x3d40))
success := and(eq(staticcall(gas(), 0x7, 0x4780, 0x60, 0x4780, 0x40), 1), success)
mstore(0x47e0, mload(0x4700))
                    mstore(0x4800, mload(0x4720))
mstore(0x4820, mload(0x4780))
                    mstore(0x4840, mload(0x47a0))
success := and(eq(staticcall(gas(), 0x6, 0x47e0, 0x80, 0x47e0, 0x40), 1), success)
mstore(0x4860, 0x0acb3da24719470e54ae0c587bb76e894b63fa5de63465ce7870474d228cc94a)
                    mstore(0x4880, 0x28bd0050e6f9e72681df0b5906a4852dfd9314a90dc86ec7dae9c45b57a7f96c)
mstore(0x48a0, mload(0x3d60))
success := and(eq(staticcall(gas(), 0x7, 0x4860, 0x60, 0x4860, 0x40), 1), success)
mstore(0x48c0, mload(0x47e0))
                    mstore(0x48e0, mload(0x4800))
mstore(0x4900, mload(0x4860))
                    mstore(0x4920, mload(0x4880))
success := and(eq(staticcall(gas(), 0x6, 0x48c0, 0x80, 0x48c0, 0x40), 1), success)
mstore(0x4940, 0x15b2693e49411b7be747eb36ac4f31eb14df11b05ed36bddd6ccd217767707fb)
                    mstore(0x4960, 0x1a361b2dfef63113195ad3cb2740dbac376cb15a3d76efbefa6613c85ca945fe)
mstore(0x4980, mload(0x3d80))
success := and(eq(staticcall(gas(), 0x7, 0x4940, 0x60, 0x4940, 0x40), 1), success)
mstore(0x49a0, mload(0x48c0))
                    mstore(0x49c0, mload(0x48e0))
mstore(0x49e0, mload(0x4940))
                    mstore(0x4a00, mload(0x4960))
success := and(eq(staticcall(gas(), 0x6, 0x49a0, 0x80, 0x49a0, 0x40), 1), success)
mstore(0x4a20, 0x22a357780c1b10ed4dc59ca1c39d055909e1073667e5e8e5718826f0b62c43c8)
                    mstore(0x4a40, 0x176d44d5a603353f7103e8f136428bc31e0e1ffc3bd0b3fa937c4ddd9871be57)
mstore(0x4a60, mload(0x3da0))
success := and(eq(staticcall(gas(), 0x7, 0x4a20, 0x60, 0x4a20, 0x40), 1), success)
mstore(0x4a80, mload(0x49a0))
                    mstore(0x4aa0, mload(0x49c0))
mstore(0x4ac0, mload(0x4a20))
                    mstore(0x4ae0, mload(0x4a40))
success := and(eq(staticcall(gas(), 0x6, 0x4a80, 0x80, 0x4a80, 0x40), 1), success)
mstore(0x4b00, 0x000a5fe7a2d28bbbf25c72d20e4655c0f9deaa24986d8d655f4c5f0e329b9ec8)
                    mstore(0x4b20, 0x159d261f2143ce53f52d89de3c0c4fc042c41531dc4d20fd59581cd08a532f19)
mstore(0x4b40, mload(0x3dc0))
success := and(eq(staticcall(gas(), 0x7, 0x4b00, 0x60, 0x4b00, 0x40), 1), success)
mstore(0x4b60, mload(0x4a80))
                    mstore(0x4b80, mload(0x4aa0))
mstore(0x4ba0, mload(0x4b00))
                    mstore(0x4bc0, mload(0x4b20))
success := and(eq(staticcall(gas(), 0x6, 0x4b60, 0x80, 0x4b60, 0x40), 1), success)
mstore(0x4be0, 0x266c42673da9fe6c42f8057cf091fe8645a95ddb2736296453be0b7fdd0c6cfc)
                    mstore(0x4c00, 0x289461fdfeb8dc5f5ca4b5d48d5fc08c54ebc283b3f9e20f4dba5280aa2f64f4)
mstore(0x4c20, mload(0x3de0))
success := and(eq(staticcall(gas(), 0x7, 0x4be0, 0x60, 0x4be0, 0x40), 1), success)
mstore(0x4c40, mload(0x4b60))
                    mstore(0x4c60, mload(0x4b80))
mstore(0x4c80, mload(0x4be0))
                    mstore(0x4ca0, mload(0x4c00))
success := and(eq(staticcall(gas(), 0x6, 0x4c40, 0x80, 0x4c40, 0x40), 1), success)
mstore(0x4cc0, 0x2cae40e367142c6ac05dc44b8fa6f69d0a4c088f88f6a0227b447b3cf49a2429)
                    mstore(0x4ce0, 0x062aeee6d53220e9dd404ec42720f971f27b10d91391c23ad7360bd35aae92bd)
mstore(0x4d00, mload(0x3e00))
success := and(eq(staticcall(gas(), 0x7, 0x4cc0, 0x60, 0x4cc0, 0x40), 1), success)
mstore(0x4d20, mload(0x4c40))
                    mstore(0x4d40, mload(0x4c60))
mstore(0x4d60, mload(0x4cc0))
                    mstore(0x4d80, mload(0x4ce0))
success := and(eq(staticcall(gas(), 0x6, 0x4d20, 0x80, 0x4d20, 0x40), 1), success)
mstore(0x4da0, 0x15afbce99c863e6e6ab86bc15fd6cf474b5fcf8022fa5daedbd6fa5db6b353bd)
                    mstore(0x4dc0, 0x2c20fe6236aca393064671a7fa774b5e5f5c098380bcd54aed9b099af4d75bf8)
mstore(0x4de0, mload(0x3e20))
success := and(eq(staticcall(gas(), 0x7, 0x4da0, 0x60, 0x4da0, 0x40), 1), success)
mstore(0x4e00, mload(0x4d20))
                    mstore(0x4e20, mload(0x4d40))
mstore(0x4e40, mload(0x4da0))
                    mstore(0x4e60, mload(0x4dc0))
success := and(eq(staticcall(gas(), 0x6, 0x4e00, 0x80, 0x4e00, 0x40), 1), success)
mstore(0x4e80, 0x00bf16a9a1bfe50cf577fbe27e0ea6ca36b33c0907dfcf1bbc51cdea9735e4bf)
                    mstore(0x4ea0, 0x10068f0c97dade4eef5a9785f180356d9d09aadcb17ee0788db2c34493f8c57a)
mstore(0x4ec0, mload(0x3e40))
success := and(eq(staticcall(gas(), 0x7, 0x4e80, 0x60, 0x4e80, 0x40), 1), success)
mstore(0x4ee0, mload(0x4e00))
                    mstore(0x4f00, mload(0x4e20))
mstore(0x4f20, mload(0x4e80))
                    mstore(0x4f40, mload(0x4ea0))
success := and(eq(staticcall(gas(), 0x6, 0x4ee0, 0x80, 0x4ee0, 0x40), 1), success)
mstore(0x4f60, 0x1ee82481c0de51e49f57eb78a2fd004bcfc7566b81ceeae6995990ba81d5c1ec)
                    mstore(0x4f80, 0x21e0342b69a5f87358f8f1b7cb1cea830f31e0ca1ce6c48ac69058e463f27f7c)
mstore(0x4fa0, mload(0x3e60))
success := and(eq(staticcall(gas(), 0x7, 0x4f60, 0x60, 0x4f60, 0x40), 1), success)
mstore(0x4fc0, mload(0x4ee0))
                    mstore(0x4fe0, mload(0x4f00))
mstore(0x5000, mload(0x4f60))
                    mstore(0x5020, mload(0x4f80))
success := and(eq(staticcall(gas(), 0x6, 0x4fc0, 0x80, 0x4fc0, 0x40), 1), success)
mstore(0x5040, 0x30299d597a145ce1c9aff63a2b13a07a065d7e73548bcbba0379732a39df8c14)
                    mstore(0x5060, 0x2a8ec83ef9a13a6dcd66e5c7a57d7fcc4bbaa52b2e0d92fded152a95ac169123)
mstore(0x5080, mload(0x3e80))
success := and(eq(staticcall(gas(), 0x7, 0x5040, 0x60, 0x5040, 0x40), 1), success)
mstore(0x50a0, mload(0x4fc0))
                    mstore(0x50c0, mload(0x4fe0))
mstore(0x50e0, mload(0x5040))
                    mstore(0x5100, mload(0x5060))
success := and(eq(staticcall(gas(), 0x6, 0x50a0, 0x80, 0x50a0, 0x40), 1), success)
mstore(0x5120, mload(0x4e0))
                    mstore(0x5140, mload(0x500))
mstore(0x5160, mload(0x3ea0))
success := and(eq(staticcall(gas(), 0x7, 0x5120, 0x60, 0x5120, 0x40), 1), success)
mstore(0x5180, mload(0x50a0))
                    mstore(0x51a0, mload(0x50c0))
mstore(0x51c0, mload(0x5120))
                    mstore(0x51e0, mload(0x5140))
success := and(eq(staticcall(gas(), 0x6, 0x5180, 0x80, 0x5180, 0x40), 1), success)
mstore(0x5200, mload(0x520))
                    mstore(0x5220, mload(0x540))
mstore(0x5240, mload(0x3ec0))
success := and(eq(staticcall(gas(), 0x7, 0x5200, 0x60, 0x5200, 0x40), 1), success)
mstore(0x5260, mload(0x5180))
                    mstore(0x5280, mload(0x51a0))
mstore(0x52a0, mload(0x5200))
                    mstore(0x52c0, mload(0x5220))
success := and(eq(staticcall(gas(), 0x6, 0x5260, 0x80, 0x5260, 0x40), 1), success)
mstore(0x52e0, mload(0x560))
                    mstore(0x5300, mload(0x580))
mstore(0x5320, mload(0x3ee0))
success := and(eq(staticcall(gas(), 0x7, 0x52e0, 0x60, 0x52e0, 0x40), 1), success)
mstore(0x5340, mload(0x5260))
                    mstore(0x5360, mload(0x5280))
mstore(0x5380, mload(0x52e0))
                    mstore(0x53a0, mload(0x5300))
success := and(eq(staticcall(gas(), 0x6, 0x5340, 0x80, 0x5340, 0x40), 1), success)
mstore(0x53c0, mload(0x440))
                    mstore(0x53e0, mload(0x460))
mstore(0x5400, mload(0x3f00))
success := and(eq(staticcall(gas(), 0x7, 0x53c0, 0x60, 0x53c0, 0x40), 1), success)
mstore(0x5420, mload(0x5340))
                    mstore(0x5440, mload(0x5360))
mstore(0x5460, mload(0x53c0))
                    mstore(0x5480, mload(0x53e0))
success := and(eq(staticcall(gas(), 0x6, 0x5420, 0x80, 0x5420, 0x40), 1), success)
mstore(0x54a0, mload(0x340))
                    mstore(0x54c0, mload(0x360))
mstore(0x54e0, mload(0x40a0))
success := and(eq(staticcall(gas(), 0x7, 0x54a0, 0x60, 0x54a0, 0x40), 1), success)
mstore(0x5500, mload(0x5420))
                    mstore(0x5520, mload(0x5440))
mstore(0x5540, mload(0x54a0))
                    mstore(0x5560, mload(0x54c0))
success := and(eq(staticcall(gas(), 0x6, 0x5500, 0x80, 0x5500, 0x40), 1), success)
mstore(0x5580, mload(0x380))
                    mstore(0x55a0, mload(0x3a0))
mstore(0x55c0, mload(0x40c0))
success := and(eq(staticcall(gas(), 0x7, 0x5580, 0x60, 0x5580, 0x40), 1), success)
mstore(0x55e0, mload(0x5500))
                    mstore(0x5600, mload(0x5520))
mstore(0x5620, mload(0x5580))
                    mstore(0x5640, mload(0x55a0))
success := and(eq(staticcall(gas(), 0x6, 0x55e0, 0x80, 0x55e0, 0x40), 1), success)
mstore(0x5660, mload(0x3c0))
                    mstore(0x5680, mload(0x3e0))
mstore(0x56a0, mload(0x4260))
success := and(eq(staticcall(gas(), 0x7, 0x5660, 0x60, 0x5660, 0x40), 1), success)
mstore(0x56c0, mload(0x55e0))
                    mstore(0x56e0, mload(0x5600))
mstore(0x5700, mload(0x5660))
                    mstore(0x5720, mload(0x5680))
success := and(eq(staticcall(gas(), 0x6, 0x56c0, 0x80, 0x56c0, 0x40), 1), success)
mstore(0x5740, mload(0x400))
                    mstore(0x5760, mload(0x420))
mstore(0x5780, mload(0x4280))
success := and(eq(staticcall(gas(), 0x7, 0x5740, 0x60, 0x5740, 0x40), 1), success)
mstore(0x57a0, mload(0x56c0))
                    mstore(0x57c0, mload(0x56e0))
mstore(0x57e0, mload(0x5740))
                    mstore(0x5800, mload(0x5760))
success := and(eq(staticcall(gas(), 0x6, 0x57a0, 0x80, 0x57a0, 0x40), 1), success)
mstore(0x5820, mload(0x200))
                    mstore(0x5840, mload(0x220))
mstore(0x5860, mload(0x4380))
success := and(eq(staticcall(gas(), 0x7, 0x5820, 0x60, 0x5820, 0x40), 1), success)
mstore(0x5880, mload(0x57a0))
                    mstore(0x58a0, mload(0x57c0))
mstore(0x58c0, mload(0x5820))
                    mstore(0x58e0, mload(0x5840))
success := and(eq(staticcall(gas(), 0x6, 0x5880, 0x80, 0x5880, 0x40), 1), success)
mstore(0x5900, mload(0xb60))
                    mstore(0x5920, mload(0xb80))
mstore(0x5940, sub(f_q, mload(0x43c0)))
success := and(eq(staticcall(gas(), 0x7, 0x5900, 0x60, 0x5900, 0x40), 1), success)
mstore(0x5960, mload(0x5880))
                    mstore(0x5980, mload(0x58a0))
mstore(0x59a0, mload(0x5900))
                    mstore(0x59c0, mload(0x5920))
success := and(eq(staticcall(gas(), 0x6, 0x5960, 0x80, 0x5960, 0x40), 1), success)
mstore(0x59e0, mload(0xc00))
                    mstore(0x5a00, mload(0xc20))
mstore(0x5a20, mload(0x43e0))
success := and(eq(staticcall(gas(), 0x7, 0x59e0, 0x60, 0x59e0, 0x40), 1), success)
mstore(0x5a40, mload(0x5960))
                    mstore(0x5a60, mload(0x5980))
mstore(0x5a80, mload(0x59e0))
                    mstore(0x5aa0, mload(0x5a00))
success := and(eq(staticcall(gas(), 0x6, 0x5a40, 0x80, 0x5a40, 0x40), 1), success)
mstore(0x5ac0, mload(0x5a40))
                    mstore(0x5ae0, mload(0x5a60))
mstore(0x5b00, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x5b20, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5b40, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5b60, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5b80, mload(0xc00))
                    mstore(0x5ba0, mload(0xc20))
mstore(0x5bc0, 0x193ebdd61b1a76650a440c4dd83e23b881c5033c2e6f2d4112bbaec3adee7834)
            mstore(0x5be0, 0x22e3b21fda278eb03ef5c5b5a177bb6ba12cfb4ee3f483216a3b445548f236cc)
            mstore(0x5c00, 0x28754d3239b6b8e9bfae762040e911331cad127bc924fed67d9d7fa0fcdaee2b)
            mstore(0x5c20, 0x210dde21c9c685d4b05255485ae6ce43246d153b0a53a2a8519d9364d8cd2019)
success := and(eq(staticcall(gas(), 0x8, 0x5ac0, 0x180, 0x5ac0, 0x20), 1), success)
success := and(eq(mload(0x5ac0), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}
        